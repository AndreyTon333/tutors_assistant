from aiogram import F, Router, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, default_state, StatesGroup
from aiogram.fsm.context import FSMContext
from datetime import datetime, date, timedelta

from aiogram.types import ReplyKeyboardRemove

from handlers.handler_add_dz import process_hello_admin
from handlers.handler_send_dz import dict_chapter
import keyboards.keyboards as kb
import database.requests as rq


router = Router()

import logging
import asyncio
import random

class CheckDzFSM(StatesGroup):
    state_send_dz = State()


@router.callback_query(F.data == 'check_dz')
async def process_check_dz_step1(clb: CallbackQuery, bot: Bot):
    """–ï—Å–ª–∏ –î–ó –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ—Ç, —Ç–æ Alert = '–Ω–µ—Ç –¥–∑'. –ï—Å–ª–∏ '–¥–∞', —Ç–æ –∫–Ω–æ–ø–∫–∏ '–í—Å–µ –≤–µ—Ä–Ω–æ' –∏ '–ò—Å–ø—Ä–∞–≤–∏—Ç—å' """
    logging.info('proess_check_dz_step1')
    tg_id = clb.message.chat.id

    count_check_dz = await rq.get_count_executed_dz()
    if count_check_dz == 0:
        await clb.answer(
            text='–î–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ—Ç',
            show_alert=True
        )
        return
    else:
        try:
            await bot.delete_message(chat_id=clb.message.chat.id, message_id=clb.message.message_id)
        except:
            pass
        data_executed_dz = await rq.get_dz_to_executed() # —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã Relation
        logging.info(f"data_executed_dz = {data_executed_dz}")

        one_executed_dz = data_executed_dz[0] # —ç—Ç–æ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Relation
        if one_executed_dz.comment_to_execute_dz: # –µ—Å–ª–∏ –µ—Å—Ç—å comment_to_execute_dz –≤ —Ç–∞–±–ª–∏—Ü–µ Relation
            logging.info(f"one_executed_dz.comment_to_execute_dz = {one_executed_dz.comment_to_execute_dz}")
            comment_to_execute_dz = one_executed_dz.comment_to_execute_dz
            list_comment_to_execute_dz = comment_to_execute_dz.split(',!?!,')
            for item in list_comment_to_execute_dz:
                if 'https://' not in item: # —Å–ø–µ—Ä–≤–∞ –≤—ã–≤–æ–¥–∏–º –∫–æ–º–º–µ–Ω—Ç—ã –∫ –î–ó
                    await bot.send_message(chat_id=tg_id, text=item)
            for item in list_comment_to_execute_dz:
                if 'https://' in item: # –∑–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç—ã —Å—Å—ã–ª–æ–∫
                    await bot.send_message(chat_id=tg_id, text=item)

        if one_executed_dz.executed_dz: # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∞ (–∫–æ–Ω—Ç–µ–Ω—Ç) –≤ –∫–æ–ª–æ–Ω–∫–µ executed_dz
            logging.info(f"one_executed_dz.executed_dz = {one_executed_dz.executed_dz}")
            execeted_dz = one_executed_dz.executed_dz
            list_executed_dz = execeted_dz.split(',')
            for item in list_executed_dz:
                try:
                    await bot.send_photo(chat_id=tg_id, photo=item)
                except:
                    try:
                        await bot.send_document(chat_id=tg_id, document=item)
                    except:
                        try:
                            await bot.send_message(chat_id=tg_id)
                        except:
                            pass
        keyboard = kb.kb_all_right_check_dz(id_relation=one_executed_dz.id)
        await clb.message.answer(
            text=f'–£—á–µ–Ω–∏–∫ {one_executed_dz.fio} –æ—Ç–ø—Ä–∞–≤–∏–ª –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É',
            reply_markup=keyboard
        )
    await clb.answer()
        # –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –î–ó



@router.callback_query(F.data.startswith('all_right_dz'))
async def process_check_dz_all_right_dz(clb: CallbackQuery, bot: Bot):
    """–ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–æ '–í—Å–µ –≤–µ—Ä–Ω–æ' """
    logging.info('proess_check_dz_all_right_dz')
    tg_id = clb.message.chat.id

    id_relation = clb.data.split('!')[-1]
    # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è "–í—Å–µ –≤–µ—Ä–Ω–æ" –≤ –∫–æ–ª–æ–Ω–∫—É checked_dz
    await rq.set_attribute_relation(id_relation=id_relation,
                                    attribute = 'checked_dz',
                                    set_attribute = '–í—Å—ë –≤–µ—Ä–Ω–æ'
                                    )

    await process_check_dz_step1(clb=clb, bot=bot)
    await clb.answer()



@router.callback_query(F.data.startswith('fix_dz'))
async def process_check_dz_fix_dz(clb: CallbackQuery, state: FSMContext):
    """–ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–æ '–ò—Å–ø—Ä–∞–≤–∏—Ç—å', —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å–∞ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ """
    logging.info('proess_check_dz_fix_dz')
    #tg_id = clb.message.chat.id

    id_relation = clb.data.split('!')[-1]

    await state.set_state(CheckDzFSM.state_send_dz)
    await state.update_data(id_relation = id_relation)
    await clb.message.answer(
        text=f'–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—á–µ–Ω–∏–∫—É. '
        f'–ö–æ–Ω—Ç–µ–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–º —Å —Å—Å—ã–ª–∫–∞–º–∏, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –∏–ª–∏ —Ñ–∞–π–ª–∞–º–∏'
        )
    await clb.answer()



@router.message(CheckDzFSM.state_send_dz)
async def process_check_dz_fix_dz_send_dz(message: Message, state: State):
    """–í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    logging.info('process_check_dz_fix_dz_send_dz')

    await asyncio.sleep(random.random())

    data = await state.get_data()
    list_checked_dz = data.get('checked_dz', [])  # –º–µ—Ç–æ–¥ get —É —Å–ª–æ–≤–∞—Ä—è: –µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á 'checked_dz', —Ç–æ –≤—ã–¥–∞—Å—Ç –µ–≥–æ, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    count = data.get('count', [])
    logging.info(f"–ù–ê–ß–ê–õ–û await state.get_data() = {await state.get_data()}")
    if message.text:
        # –ø–æ–ª—É—á–∞–µ–º —á—Ç–æ –µ—Å—Ç—å –≤ state data.text
        data_text = await state.get_data()
        if 'comment_checked_dz' not in data_text:
            await state.update_data(comment_checked_dz=message.text)
        else:
            data_text_new = data_text['comment_checked_dz'] + ',!?!,' + message.text
            await state.update_data(comment_checked_dz=data_text_new)

        await message.answer(
            text='–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∑–∞–¥–∞–Ω–∏—è üìé',
            reply_markup=kb.kb_check_dz_add_more_check_next())
        return


    elif message.photo:
        checked_dz = message.photo[-1].file_id

    elif message.document:
        checked_dz = message.document.file_id


    list_checked_dz.append(checked_dz)
    count.append(checked_dz)

    logging.info(f"checked_dz = {checked_dz} --- list_checked_dz = {list_checked_dz} --- count = {count}")

    await state.update_data(checked_dz=list_checked_dz)
    await state.update_data(count=count)
    await state.set_state(state=None)

    logging.info(f"–ö–û–ù–ï–¶ await state.get_data() = {await state.get_data()}")

    if len(count) == 1:
        await message.answer(
        text=f'–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–º—É –¥–æ–º–∞—à–Ω–µ–º—É –∑–∞–¥–∞–Ω–∏—é, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", '
        f'–∞ –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä–∑–∏—Ç—å –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –î–ó, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –î–ó".',
        reply_markup=kb.kb_check_dz_add_more_check_next())


@router.callback_query(F.data == 'add_more_check_dz')
@router.callback_query(F.data == 'check_next_dz')
async def process_check_dz_last_step(clb: CallbackQuery, state: State, bot:Bot) -> None:
    """–ò–ª–∏ '–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë' –î–ó –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤–æ–≥–æ –î–ó. —Ç–æ–≥–¥–∞ –∑–∞–Ω–µ—Å—Ç–∏ –≤ –ë–î –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–µ –î–ó"""
    logging.info('process_check_dz_last_step')

    if clb.data == 'add_more_check_dz':
        await state.set_state(CheckDzFSM.state_send_dz)
        await state.update_data(count=[])
        await clb.message.edit_text(
            text='–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∑–∞–¥–∞–Ω–∏—è üìé')

    elif clb.data == 'check_next_dz':
        data_checked_dz = await state.get_data()
        logging.info(data_checked_dz)

        str_checked_dz: str = ''
        if 'comment_checked_dz' in data_checked_dz or 'checked_dz' in data_checked_dz:
            if 'checked_dz' in data_checked_dz:
                data_list_checked_dz = (await state.get_data())['checked_dz']
                str_checked_dz = ','.join(data_list_checked_dz)
                await rq.set_attribute_relation(
                    id_relation=data_checked_dz['id_relation'],
                    attribute='checked_dz',
                    set_attribute=str_checked_dz)

            if 'comment_checked_dz' in data_checked_dz:
                str_checked_dz = (await state.get_data())['comment_checked_dz']
                await rq.set_attribute_relation(
                    id_relation=data_checked_dz['id_relation'],
                    attribute='comment_checked_dz',
                    set_attribute=str_checked_dz)


            # –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—á–µ–Ω–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
            data_dz = await rq.get_data_relation_from_id(id=data_checked_dz['id_relation'])
            await bot.send_message(
                chat_id=data_dz.tg_id,
                text=f'–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–∫–∏ –ø–æ –¥–æ–º–∞—à–Ω–µ–º—É –∑–∞–¥–∞–Ω–∏—é {data_dz.name_dz}, —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è - {data_dz.deadline}'
            )

            # –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ—É–Ω–∫—Ü–∏–∏ process_check_dz_step1
            await process_check_dz_step1(clb=clb, bot=bot)
            await state.clear()

        else:
            await clb.message.answer(
                text='–î–æ–±–∞–≤—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –∫ –¥–æ–º–∞—à–Ω–µ–º—É –∑–∞–¥–∞–Ω–∏—é'
            )
            await process_check_dz_fix_dz_send_dz(message=clb.message, state=state)
    await clb.answer()


# await state.update_data(comment_checked_dz
# await state.update_data(checked_dz
# await state.update_data(id_relation