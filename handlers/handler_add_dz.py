from datetime import date, datetime
from aiogram import F, Router, Bot

from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, default_state, StatesGroup
from aiogram.fsm.context import FSMContext
#from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardRemove
#from filter.user_filter import IsChatPrivate



import keyboards.keyboards as kb
import database.requests as rq


router = Router()
#router.message.filter(IsChatPrivate())

#storage = MemoryStorage()

import logging
import asyncio
import random

class AddDZ(StatesGroup):
    state_add_name_dz = State()
    state_add_content = State()


async def process_hello_admin(message: Message, state: FSMContext, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å! –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–∞!' –∏ –≤—ã–≤–æ–∂—É reply –∫–Ω–æ–ø–∫–∏ '–î–ó' '–£—á–µ–Ω–∏–∫–∏'"""
    logging.info('process_hello_admin')
    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        logging.info('–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –°–¢–†–û–ö–ê 37')
    except:
        pass

    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id-1)
        logging.info('–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –°–¢–†–û–ö–ê 43')
    except:
        pass
    await state.set_state(state=None)

    #await bot.send_message(
    #    chat_id=message.chat.id,
    #    text='–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å!\n–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–∞!',
    #    reply_markup=kb.kb_admin_dz_lrn())


@router.message(F.text == '–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ')
async def process_home_task(message:Message, bot:Bot, state: FSMContext):
    """–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ reply –∫–Ω–æ–ø–∫—É '–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ'"""
    logging.info('process_home_task')

    #if '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å' not in """–∫–∞–∫ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Ç–µ–∫—Å—Ç—É -1 —Å–æ–æ–±—â–µ–Ω–∏—è?""":
    #    # —á—Ç–æ–±—ã —É–¥–∞–ª—è–ª–∞—Å—å –∏–º–µ–Ω–Ω–æ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –∞ —Ä–µ–ø–ª–∞–π –æ—Å—Ç–∞–≤–∞–ª–∞—Å—å
    #    try: #—á—Ç–æ–±—ã –Ω–µ –≤–∏—Å–µ–ª–∞ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    #        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id-1)
    #    except:
    #        pass

    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except:
        pass

    if 'hello_message' not in (await state.get_data()):
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id-1)
        except:
            pass
    else:
        await state.clear()

    #await bot.send_message(
    #    chat_id=message.chat.id,
    #    text='–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å!\n–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–∞!',
    #    reply_markup=kb.kb_admin_dz_lrn())
    await message.answer(
        text='–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –î–ó –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è, –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∞–º–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.',
        reply_markup=await kb.kb_send_add_check_dz())
    #await message.answer(text='–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –î–ó –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è, –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∞–º–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.',
     #                    reply_markup=await kb.kb_send_add_check_dz())



@router.callback_query(F.data == 'add_dz')
async def process_add_dz(clb: CallbackQuery, bot: Bot):
    """–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ inline –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –î–ó' –≤ —Ä–∞–∑–¥–µ–ª–µ '–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ'"""
    logging.info('process_add_dz')
    try:
        await bot.delete_message(chat_id=clb.message.chat.id, message_id=clb.message.message_id)
    except:
        pass

    await clb.message.answer(
        text='–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞',
        reply_markup=kb.kb_name_chapter_dz(prefix='process_add_dz'))
    await clb.answer()


@router.callback_query(F.data.startswith('process_add_dz'))
async def process_add_dz_send_name_dz(clb: CallbackQuery, bot: Bot, state: FSMContext):
    """–ü–µ—Ä–µ–≤–æ–¥ –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –î–ó"""
    logging.info('process_add_dz_send_name_dz')
    await bot.delete_message(chat_id=clb.message.chat.id, message_id=clb.message.message_id)

    await state.update_data(chapter=clb.data.split('!')[-1]) # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ (–ï–ì–≠, –û–ì–≠, –∫–ª–∞—Å—Å—ã)
    await state.set_state(state=AddDZ.state_add_name_dz)

    await clb.message.answer(text=
                                f"–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è.\n\n"
                                f"–°–ø—Ä–∞–≤–∫–∞ - –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ –∏ –∫–æ—Ä–æ—Ç–∫–æ–µ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ "
                                f"–∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—á–µ–Ω–∏–∫–∞–º")
    await clb.answer()


@router.message(AddDZ.state_add_name_dz)
async def process_add_dz_send_content(message: Message, bot: Bot, state: FSMContext):
    """–ü–µ—Ä–µ–≤–æ–¥ –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –î–ó"""
    logging.info('process_add_dz_send_content')

    await bot.delete_message(chat_id=message.chat.id,
                             message_id=message.message_id)
    await bot.delete_message(chat_id=message.chat.id,
                             message_id=message.message_id-1)

    await state.update_data(name_dz=message.text)
    await state.set_state(state=AddDZ.state_add_content)
    data_=await state.get_data()
    #logging.info(f"data = {data_}")
    await message.answer(
        text=f"–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∑–∞–¥–∞–Ω–∏—è üìé. \n–ö–æ–Ω—Ç–µ–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–º —Å —Å—ã–ª–∫–∞–º–∏, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –∏–ª–∏ —Ñ–∞–π–ª–æ–º.\n\n"
        f"–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –¥–æ–º–∞—à–Ω–µ–º—É –∑–∞–¥–∞–Ω–∏—é, –ø—Ä–∏—à–ª–∏—Ç–µ –µ–≥–æ –ø–µ—Ä–≤—ã–º –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º,"
        f" –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—è –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ —Ñ–∞–π–ª—É.")


@router.message(AddDZ.state_add_content)
async def process_add_dz_save_content_add_content(message: Message, bot: Bot, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ"""
    logging.info('process_add_dz_save_content_add_content')


    await asyncio.sleep(random.random())

    data = await state.get_data()
    list_content = data.get('content', [])# –º–µ—Ç–æ–¥ get —É —Å–ª–æ–≤–∞—Ä—è: –µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á 'content', —Ç–æ –≤—ã–¥–∞—Å—Ç –µ–≥–æ, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    count = data.get('count', [])
    #logging.info(f"STROKA 105 --- list_content = {list_content}")

    if message.text:
        # –ø–æ–ª—É—á–∞–µ–º —á—Ç–æ –µ—Å—Ç—å –≤ state data.text
        data_text = await state.get_data()
        if 'text' not in data_text:
            await state.update_data(text=message.text)
        else:
            data_text_new = data_text['text'] + ',!?!,' + message.text
            await state.update_data(text=data_text_new)
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id-1)
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        await message.answer(text='–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∑–∞–¥–∞–Ω–∏—è üìé',
                             reply_markup=kb.kb_save_add_dz(endfix = 'add_dz'))

        return

    elif message.photo:
        content = message.photo[-1].file_id

    elif message.document:
        content = message.document.file_id

    list_content.append(content)
    count.append(content)

    await state.update_data(content=list_content)
    await state.update_data(count=count)
    await state.set_state(state=None)

    if len(count) == 1:
        await message.answer(
        text='–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∫ –¥–æ–º–∞—à–Ω–µ–º—É –∑–∞–¥–∞–Ω–∏—é, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", –∞ –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä–∑–∏—Ç—å –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.',
        reply_markup=kb.kb_save_add_dz(endfix = 'add_dz'))
    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    except:
        pass
    try:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id-1)
    except:
        pass

@router.callback_query(F.data.endswith('add_dz'))
async def process_add_dz_written_content_to_bd(clb: CallbackQuery, state: FSMContext, bot: Bot):
    logging.info(f'process_add_dz_written_content_to_bd {clb.message.chat.id}')

    #await bot.delete_message(chat_id=clb.message.chat.id, message_id=clb.message.message_id-1)
    await bot.delete_message(chat_id=clb.message.chat.id, message_id=clb.message.message_id)
    answer = clb.data.split('!')[0]

    if answer == 'add_more':
        await state.set_state(AddDZ.state_add_content)
        await state.update_data(count=[])
        await clb.message.answer(
            text='–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∑–∞–¥–∞–Ω–∏—è üìé')


    elif answer == 'continue':
        ### –°–¥–µ–ª–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏, –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–∏—Å–ª–∞–Ω –Ω–µ –±—ã–ª. –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        #logging.info(f"await state.get_data() = {await state.get_data()}")

        if 'content' in (await state.get_data()):
            data_list_content = (await state.get_data())['content']
            str_content = ','.join(data_list_content)
            await state.update_data(content = str_content)
            #logging.info(f"await state.get_data() = {await state.get_data()}")
        dict_content = await state.get_data()
        if 'count' in dict_content:
            del dict_content['count']

        await rq.add_content(dict_content)
        #logging.info(f"--- await state.get_data() = {await state.get_data()} ---- dict_content = {dict_content}")


        #await asyncio.sleep(3)
        await clb.answer(
            text=f'–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ "{dict_content["name_dz"]}". –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å –î–ó.',
            show_alert=True
        )

        await state.clear()
        await state.set_state(state=None)
        await process_add_dz(clb=clb, bot=bot)

    #await clb.answer()
